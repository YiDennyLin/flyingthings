apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: minio-server-pipeline
  namespace: flyingthings-standalone
spec:
  params:
    - description: url of the git repo for the code of deployment
      name: git-url
      type: string
    - description: revision to be used from repo of the code for deployment
      name: git-revision
      type: string
  tasks:
    - name: fetch-repository
      params:
        - name: url
          value: $(params.git-url)
        - name: subdirectory
          value: ''
        - name: deleteExisting
          value: 'true'
        - name: revision
          value: $(params.git-revision)
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
    - name: deploy
      taskSpec:
        metadata:
          annotations:
            # operator.tekton.dev/last-applied-hash: 64d9014f8c7f4cd290afc619a32a185211cae3b23d56af70197b0e936ec8d35b
            tekton.dev/displayName: openshift client
            tekton.dev/pipelines.minVersion: 0.17.0
            tekton.dev/tags: cli
          labels:
            app.kubernetes.io/version: '0.2'
            operator.tekton.dev/operand-name: openshift-pipelines-addons
            operator.tekton.dev/provider-type: redhat
        description: >-
          This task runs commands against the cluster provided by user and if not
          provided then where the Task is being executed.

          OpenShift is a Kubernetes distribution from Red Hat which provides oc, the
          OpenShift CLI that complements kubectl for simplifying deployment and
          configuration applications on OpenShift.
        params:
          - default: oc help
            description: The OpenShift CLI arguments to run
            name: SCRIPT
            type: string
          - default: latest
            description: The OpenShift Version to use
            name: VERSION
            type: string
        steps:
          - env:
              - name: HOME
                value: /tekton/home
            image: >-
              image-registry.openshift-image-registry.svc:5000/openshift/cli:$(params.VERSION)
            name: oc
            resources: {}
            script: |
              #!/usr/bin/env bash

              [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
              cd $(workspaces.manifest-dir.path)

              [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
              [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
              export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

              $(params.SCRIPT)
            securityContext:
              runAsNonRoot: true
              runAsUser: 65532
        workspaces:
          - description: >-
              The workspace which contains kubernetes manifests which we want to apply
              on the cluster.
            name: manifest-dir
            optional: true
          - description: >-
              The workspace which contains the the kubeconfig file if in case we want to
              run the oc command on another cluster.
            name: kubeconfig-dir
            optional: true
      workspaces:
        - name: source
          workspace: shared-workspace
      runAfter:
        - fetch-repository
      params:
      - name: SCRIPT
        value: |
          oc apply -k /workspace/source/minio
    - name: upload-artifacts
      taskSpec:
        steps:
          - name: run-batch-file
            image: ubi9:latest
            env:
              - name: MINIO_ENDPOINT
                value: http://minio:9000
              - name: MINIO_BUCKET
                value: flyingthings
              - name: MINIO_ACCESSKEY
                value: minioadmin
              - name: MINIO_SECRETKEY
                value: minioadmin
              - name: MINIO_CLIENT_URL
                value: https://dl.min.io/client/mc/release/linux-amd64
              - name: WORKSPACE_DIR
                value: /opt/app-root/src/workspace/workspace
              - name: MINCFG
                value: $WORKSPACE_DIR/miniocfg
              - name: SOURCE_DIR
                value: /workspace/output
            script: |
              #!/usr/bin/env bash
              echo "Let's see what we got here..." \
              && ls -al /workspace/workspace/source \
              && /workspace/workspace/source/minio-client/bucket-ops.sh
      runAfter:
        - deploy
      workspaces:
        - name: workspace
          workspace: shared-workspace
  workspaces:
    - name: shared-workspace
